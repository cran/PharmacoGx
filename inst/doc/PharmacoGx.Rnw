%\VignetteIndexEntry{PharmacoGx: an R package for analysis of large pharmacogenomic datasets}
%\VignetteDepends{xtable}
%\VignetteSuggests{}
%\VignetteKeywords{}
%\VignettePackage{PharmacoGx}

\documentclass[11pt]{article}

\usepackage[utf8]{inputenc}
\usepackage{authblk}


\title{PharmacoGx: an R package for analysis of large pharmacogenomic datasets}
\author[1]{Petr Smirnov}
\author[1,2]{Zhaleh Safikhani}
\author[1,2]{Benjamin Haibe-Kains}
\affil[1]{Princess Margaret Cancer Centre, University Health Network, Toronto Canada}
\affil[2]{Department of Medical Biophysics, University of Toronto, Toronto Canada}

\SweaveOpts{highlight=TRUE, tidy=TRUE, keep.space=TRUE, keep.blank.space=FALSE, keep.comment=TRUE}

<<setup,echo=FALSE,results=hide,eval=TRUE>>=
options(keep.source=TRUE)
@

\begin{document}
\SweaveOpts{concordance=TRUE}

\maketitle
\tableofcontents

%------------------------------------------------------------
\section{Introduction}
%------------------------------------------------------------

Pharmacogenomics hold much potential to aid in discovering drug response
biomarkers and developing novel targeted therapies, leading to development of
precision medicine and working towards the goal of personalized therapy.
Several large experiments have been conducted, both to molecularly
characterize drug dose response across many cell lines, and to examine the
molecular response to drug administration. However, the experiments lack a
standardization of protocols and annotations, hindering meta-analysis across
several experiments.\\

\textit{PharmacoGx} was developed to address these challenges, by providing a
unified framework for downloading and analyzing large pharmacogenomic datasets
which are extensively curated to ensure maximum overlap and consistency.
\textit{PharmacoGx} is based on a level of abstraction from the raw
experimental data, and allows bioinformaticians and biologists to work with
data at the level of genes, drugs and cell lines. This provides a more
intuitive interface and, in combination with unified curation, simplifies
analyses between multiple datasets.\\

To organize the data released by each experiment, we developed the
\textit{PharmacoSet} class. This class efficiently stores different types of
data and facilitates interrogating the data by drug or cell line. The
\textit{PharmacoSet} is also versatile in its ability to deal with two
distinct types of pharmacogenomic datasets. The first type, known as
\textit{sensitivity} datasets, are datasets where cell lines were profiled
on the molecular level, and then tested for drug dose response. The second
type of dataset is the \textit{perturbation} dataset. These types of
datasets profile a cell line on the molecular level before and after
administration of a compound, to characterize the action of the compound on
the molecular level.\\

With the first release of \textit{PharmacoGx} we have fully curated and
created PharmacoSet objects for three publicly available large pharmacogenomic
datasets. Two of these datasets are of the \textit{sensitivity} type. These
are the Cancer Genome Project (CGP) \cite{Garnett:2012fc} and the Cancer Cell
Line Encyclopedia (CCLE) \cite{Barretina:2012fp}. The third dataset is of the
\textit{perturbation} type, the Connectivity Map (CMAP) project
\cite{Lamb:2006hf}.\\

Furthermore, PharmacoGx provides a suite of parallized functions which
facilitate drug response biomarker discovery, and molecular drug
characterization. This vignette will provide two example analysis case
studies. The first will be comparing gene expression and drug sensitivity
measures across the CCLE and CGP projects. The second case study will
interrogate the CMAP database with a known signature of up and down regulated
genes for HDAC inhibitors as published in ~\cite{Glaser:2003gk}. Using the
Connectivity Score as defined in ~\cite{Lamb:2006hf}, it will be seen that
known HDAC inhibitors have a high numerical score and high significance.\\ 

For the purpose of this vignette, an extremely minuscule subset of all three
\textit{PharmacoSet} objects are included with the package as example data.
They are included for illustrative purposes only, and the results obtained
with them will likely be meaningless.\\


%------------------------------------------------------------
\subsection{Installation and Settings}
%------------------------------------------------------------

\textit{PharmacoGx} requires that several packages are installed. However, all dependencies are available from CRAN or Bioconductor.

<<install-pkg,eval=FALSE>>=
source('http://bioconductor.org/biocLite.R')
biocLite('PharmacoGx')
@

Load \textit{PharamacoGx} into your current workspace:
<<loadlib,results=hide,eval=False>>=
library(PharmacoGx)
@ 

%------------------------------------------------------------
\subsection*{Requirements}
%------------------------------------------------------------

\textit{PharmacoGx} has been tested on Windows, Mac and Cent OS platforms. The packages uses the core R package \textit{parallel} to preform parallel computations, and therefore if parallelization is desired, the dependencies for the parallel package must be met. 

%------------------------------------------------------------
\section{Downloading PharmacoSet objects}
%------------------------------------------------------------

We have made the PharmacoSet objects of the curated datasets available online at:\\ \textit{www.pmgenomics.ca/bhklab/software/pharmacogx/}\\

However, to make the process of obtaining the data easier through the R shell, we have also written a function \textit{downloadPSet} which automates downloading the datasets into a directory of the users choice, and returns the data into the R session. 

<<download-example, results=hide,eval=False>>=
## Example
CGP <- downloadPSet("CGP") 
@
%------------------------------------------------------------
\subsection*{Downloading Drug Signatures}
%------------------------------------------------------------

The package also provides tools to compute drug perturbation and sensitivity signatures, as explained below. However, this computation is lengthy, so for users convenience we have precomputed signatures for our three PharmacoSet objects and made them available for download using the function \textit{downloadSignatures}.

<<download-sig, results=hide, eval=False>>=
## Example
CGP.sigs <- downloadSignatures("CGP")
@

%------------------------------------------------------------
\section{Case Study}
%------------------------------------------------------------

%------------------------------------------------------------
\subsection{(In)Consistency across large pharmacogenomic studies}
%------------------------------------------------------------
Our first case study illustrates the functions for analysis of the \textit{sensitivity} type of dataset. The case study will investigate the consistency between the CGP and CCLE datasets, recreating the analysis similar to our \textit{Inconsistency in Large Pharmacogenomic Studies} paper \cite{HaibeKains:2013ie}. In both CCLE and CGP, the transcriptome of cells was profiled using an Affymatrix microarray chip. Cells were also tested for their response to increasing concentrations of various compounds, and form this the IC50 and AUC were computed. However, the cell and drugs names used between the two datasets were not consistent. Furthermore, two different microarray platforms were used. However, \textit{PharmacoGx} allows us to overcome these differences to do a comparative study between these two datasets. \\


CGP was profiled using the hgu133a platform, while CCLE was profiled with the expanded hgu133plus2 platform. While in this case the hgu133a is almost a strict subset of hgu133plus2 platform, we can use the best information from each platform by comparing the best probes within each dataset per gene. The function \textit{probeGeneMapping} selects a probe for each gene profiled in the microarray platform. It picks the most accurate probe for each gene using annotations extracted from the jetset package \cite{Li:2011cc}. Jetset scores each probe on how sensitive and specific it is, allowing probeGeneMapping to pick the probe which is most representative of each genes true expression. \\

To begin, you would load the datasets from disk or download them using the \textit{downloadPSet} function above, and then execute probeGeneMapping on the datasets. 

<<load-examples, results=hide,eval=False>>=
  ##Using the included example datasets
  library(PharmacoGx)
  data("CGPsmall")
  data("CCLEsmall")
  CGPsmall <- probeGeneMapping(CGPsmall) 
  CCLEsmall <- probeGeneMapping(CCLEsmall) 
@

We then want to investigate the consistency of the data between the two datasets. The common intersection between the datasets can then be found using \textit{intersectPSet}. We then create a summary of the gene expression and drug sensitivity measures for both datasets, and compare them using a standard correlation coefficient. 

<<inconsistencies,eval=False, include=False>>=
  library(PharmacoGx)
  data("CGPsmall")
  data("CCLEsmall")
  CGPsmall <- probeGeneMapping(CGPsmall) 
  CCLEsmall <- probeGeneMapping(CCLEsmall) 
  common <- intersectPSet(list('CCLE'=CCLEsmall,
                               'CGP'=CGPsmall),
                          intersectOn=c("cell.lines", "drugs", 'genes'))
  
  CGP.auc <- summarizeSensitivityPhenotype(
                common$CGP, 
                sensitivity.measure='auc_published', 
                summaryStat="median")
  CCLE.auc <- summarizeSensitivityPhenotype(
                common$CCLE, 
                sensitivity.measure='auc_published', 
                summaryStat="median")
  
  CGP.ic50 <- summarizeSensitivityPhenotype(
                common$CGP, 
                sensitivity.measure='ic50_published', 
                summaryStat="median")
  CCLE.ic50 <- summarizeSensitivityPhenotype(
                common$CCLE, 
                sensitivity.measure='ic50_published', 
                summaryStat="median")
  
  common$CGP <- summarizeGeneExpression(common$CGP, 
                                        cellNames(common$CGP),
                                        verbose=FALSE)
  common$CCLE <- summarizeGeneExpression(common$CCLE, 
                                         cellNames(common$CCLE),
                                         verbose=FALSE)
  gg <- geneNames(common[[1]])
  cc <- cellNames(common[[1]])
  
  ge.cor <- sapply(cc, function (x, d1, d2) {
    return (stats::cor(d1[ , x], d2[ , x], method="spearman",
                use="pairwise.complete.obs"))
  }, d1=rnaData(common$CGP), d2=rnaData(common$CCLE))
  ic50.cor <- sapply(cc, function (x, d1, d2) {
    return (stats::cor(d1[, x], d2[ , x], method="spearman",
                use="pairwise.complete.obs"))
  }, d1=t(CGP.ic50), d2=t(CCLE.ic50))
  auc.cor <- sapply(cc, function (x, d1, d2) {
    return (stats::cor(d1[ , x], d2[ , x], method="spearman",
                use="pairwise.complete.obs"))
  }, d1=t(CGP.auc), d2=t(CCLE.auc))
  
  w1 <- stats::wilcox.test(x=ge.cor, y=auc.cor, conf.int=TRUE, exact=FALSE)
  w2 <- stats::wilcox.test(x=ge.cor, y=ic50.cor, conf.int=TRUE, exact=FALSE)
  yylim <- c(-1, 1)
  ss <- sprintf("GE vs. AUC = %.1E\nGE vs. IC50 = %.1E",
                w1$p.value, w2$p.value)
  boxplot(list("GE"=ge.cor, "AUC"=auc.cor, "IC50"=ic50.cor),
          main="Concordance between cell lines",
          ylab=expression(R[s]),
          sub=ss,
          ylim=yylim,
          col="lightgrey",
          pch=20,
          border="black")

@

\begin{figure}[hbtp]
\begin{center}
<<fig2, fig=TRUE, eval=True, echo=False>>=

<<inconsistencies>>
    

@
\end{center}
\label{fig:one}
\end{figure}

%------------------------------------------------------------
\subsection{Query the Connectivity Map}
%------------------------------------------------------------

The second case study illustrates the analysis of a perturbation type datasets, where the changes in cellular molecular profiles are compared before and after administering a compound to the cell line. Of these datasets, we have currently curated and made available for download the Connectivity Map (CMAP) dataset \cite{Lamb:2006hf}. \\

For this case study, we will recreate an analysis from the paper by Lamb et al., in which a known signature for HDAC inhibitors \cite{Glaser:2003gk} is used to recover drugs in the CMAP dataset that are also known HDAC inhibitors. For this example, the package includes this signature, already mapped to the gene level, and it can be loaded by calling \textit{data(HDAC\_genes)}.

Once again, we load the dataset, and we summarize the expression on the gene level using \textit{probeGeneMapping}. We then recreate drug signatures for each drug use the function \textit{drugPerturbationSig} to preform statistical modelling of the transcriptomic response to the application of each drug. We then compare the observed up-regulated and down-regulated genes to a the known HDAC signature, using the GSEA connectivity score to determine the correlation between the two signatures. 

<<load-cmap,eval=True, results=tex>>=
  library(PharmacoGx)
  require(xtable)
  data(CMAPsmall)
  drug.perturbation <- drugPertubrationSig(CMAPsmall)
  data(HDAC_genes)
  
  res <- apply(drug.perturbation[,,c("tstat", "fdr")], 2, function(x, HDAC){ 
	    return(connectivityScore(x=x, 
	                             y=HDAC[,2,drop=FALSE], 
	                             method="gsea", nperm=100))
	}, HDAC=HDAC_genes)
  
  rownames(res) <- c("Connectivity", "P Value")
  res <- t(res)
  res <- res[order(res[,1], decreasing=T),]
  xtable(res, 
    caption='Connectivity Score results for HDAC inhibitor gene signature.')
@
As we can see, the known HDAC inhibitor Varinostat has a very strong connectivity score, as well as a very high significance as determined by permutation testing, in comparison to the other drugs, which score poorly. 

This example serves as a validation of the method, and demonstrates the ease with which drug perturbation analysis can be done using \textit{PharmacoGx}. While in this case we were matching a drug signature with a drug class signature, this method can also be used in the discovery of drugs that are anticorrelated with known disease signatures, to look for potential new treatments and drug repurposing. 
%------------------------------------------------------------
\section*{Session Info}
%------------------------------------------------------------ 

<<sessionInfo,echo=FALSE,results=tex,eval=TRUE>>=
toLatex(sessionInfo())
@

\bibliographystyle{plain}
\bibliography{biblio}

\end{document}
